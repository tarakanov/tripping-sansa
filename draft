// обработка нажатия кнопки
function buttonPress() {
    local state = button.read();
    if (state == 1)
    {
        server.log("Release");
        {
        // начало процесса измерения
        weight_en_l.write(1);
        server.log("Weight is: " + myScales.read()); // процесс измерения массы
        // завершение процесса измерения
        weight_en_l.write(0);
        }
        
    } else
    {
        
        server.log("Press");


    }
}

// класс описание полного моста для измерения массы тела
class w_bridge { 

    // калибровочные переменные для моста
    vbridge_noload = null; // напряжение моста без массы
    vbridge_withload = null; // напряжение моста с калибровочной массой
    weight_withload = null; // калибровочная масса в кг
    weight_noload   = null; // масса без массы

	// analog input pin
	p_bridge 		= null;
	points_per_read = null;

	constructor(pin, v_noload, w_noload, v_load, w_load = 5.0, points = 10) {
		this.p_bridge = pin;
		this.p_bridge.configure(ANALOG_IN);

		// force all of these values to floats in case they come in as integers
		this.vbridge_noload = v_noload * 1.0;
		this.weight_noload = w_noload * 1.0;
		this.vbridge_withload = v_load * 1.0;
		this.weight_withload = w_load * 1.0;
	}

	// вычисление массы на весах
	function read() {
		local vbridge_raw = 0; //моментальное значение напряжения моста
		local vdda_raw = 0; //моментальное значение напряжение питания (опорного напряжения)
		
		for (local i = 0; i < points_per_read; i++) {
		    vdda_raw += hardware.voltage();
		    vbridge_raw += p_bridge.read();
		}
		local vdda = (vdda_raw / points_per_read); // среднее значение опорного напряжения
		local v_bridge = (vbridge_raw / points_per_read); // среднее значение напряжение моста
		
		local weight = weight_withload * (v_bridge - vbridge_noload) / (vbridge_withload - vbridge_noload); // вычисление массы
		return weight;
	}

}

// кнопка запуска измерения
button <- hardware.pin1;


//индикатор процесса измерения (горит, когда процесс запущен)
weight_en_l <- hardware.pin9;
weight_en_l.configure(DIGITAL_OUT);


// пин, на котором сидит Vo от INA126
weight_sns <- hardware.pin2;

// инициализирование класса полного моста
myScales <- w_bridge(weight_sns, 1.55, 0.0, 1.44, 5.00, 10);

// задаём реакцию на нажатие кнопки - запуск обработчика
button.configure(DIGITAL_IN_PULLUP, buttonPress);
